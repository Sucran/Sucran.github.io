<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[超燃老哥]]></title>
  <link href="chaoranlaoge.top/atom.xml" rel="self"/>
  <link href="chaoranlaoge.top/"/>
  <updated>2021-10-02T11:13:01+08:00</updated>
  <id>chaoranlaoge.top/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[进酒浇愁]]></title>
    <link href="chaoranlaoge.top/16324434246136.html"/>
    <updated>2021-09-24T08:30:24+08:00</updated>
    <id>chaoranlaoge.top/16324434246136.html</id>
    <content type="html"><![CDATA[
<p>一梦之中</p>
<p>苦闷至极</p>
<p>睡醒之后</p>
<p>欲进酒浇愁</p>
<p>忽识为一梦</p>
<p>酒无味</p>
<p>梦中先游至未来</p>
<p>孤身一人</p>
<p>钱财为人所骗</p>
<p>容身之地为人所夺</p>
<p>虽一怒呼众人以智擒贼</p>
<p>贼为吾等所打翻于地</p>
<p>但心中不免所失之苦</p>
<p>所失为何？</p>
<p>失之钱财，却反手夺人之子以自保</p>
<p>为何？苦孤久已，才为人所惑</p>
<p>移步换景，又落至封建王朝</p>
<p>宫殿之上，吾贵为将军</p>
<p>此宴为圣上替吾等接风洗尘</p>
<p>吾此前去，是为寻得两女子</p>
<p>两女子貌可倾城，却红颜薄命，吾甚是惋惜</p>
<p>吾故甚护之，两女待我如兄，吾甚喜欢</p>
<p>奈何，奈何</p>
<p>圣上猴急欲于宫殿之上，与王族一人龌蹉此二女</p>
<p>宦臣褪其红衣，架入玉池</p>
<p>吾不忍视，心中愤慨，饮酒出殿</p>
<p>转入侧殿，冷兵相交，排兵布阵</p>
<p>将士肉身相搏，心愈乱，又回殿中</p>
<p>只见一女被一王族制于身下</p>
<p>不忍视，心乱如麻</p>
<p>欲与众人一道离去</p>
<p>却又为圣下扯住，欲逗吾为乐</p>
<p>吾愤之，将一壶之酒倒起胸上</p>
<p>皇帝盛怒却不显于色</p>
<p>吾不惧，怒颜相对，心中默想“君为何非我也？”</p>
<p>梦醒，甚感二女，苦闷之至</p>
<p>欲进酒浇愁，梦为一梦，酒无味</p>
<p>“君为何非我也？”</p>
<p>“君为何非我也？！”</p>
<p>“君为何非我也？！！！”</p>
<hr />
<p>钱财尽失，孤苦一人，所爱被夺，为他人蹂躏，求而不得，心中遗憾放不下</p>
<p>此几苦，为人生最甚</p>
<p>近来又读史书，所知唯良知与理想不可弃</p>
<p>钱财，孤苦，所爱被夺，求而不得，我都无法忍</p>
<p>由此梦见，为良知与理想，失去此几物，也非常人生活了</p>
<p>此梦告之，钱财，所爱，皆为吸引的身外物，所吸引之力愈强，为他人所强夺，终究是一时，散之身外还复来。</p>
<p>若，钱财，所爱，皆须固守，为他人所夺，此命矣。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ParameterType和ResultType]]></title>
    <link href="chaoranlaoge.top/16323983076218.html"/>
    <updated>2021-09-23T19:58:27+08:00</updated>
    <id>chaoranlaoge.top/16323983076218.html</id>
    <content type="html"><![CDATA[

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[String 和 Int 互转]]></title>
    <link href="chaoranlaoge.top/16323982286748.html"/>
    <updated>2021-09-23T19:57:08+08:00</updated>
    <id>chaoranlaoge.top/16323982286748.html</id>
    <content type="html"><![CDATA[

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Date，LocalDate日期计算]]></title>
    <link href="chaoranlaoge.top/16323982084453.html"/>
    <updated>2021-09-23T19:56:48+08:00</updated>
    <id>chaoranlaoge.top/16323982084453.html</id>
    <content type="html"><![CDATA[

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[读书心得]]></title>
    <link href="chaoranlaoge.top/16322140588541.html"/>
    <updated>2021-09-21T16:47:38+08:00</updated>
    <id>chaoranlaoge.top/16322140588541.html</id>
    <content type="html"><![CDATA[
<p>近来读《明朝那些事》，初心是收集古人失败教训，也满心好奇地找，虽然有，而且不少，但是给我留下的印象无非几种：</p>
<ul>
<li>第一是自以为卖了人情，抵不过别人的亲缘关系<br />
教训提供者：徐阶</li>
<li>第二是大患不除，妇人之仁，后悔莫及<br />
教训提供者：建文帝</li>
<li>第三是过于捍卫原则，却成为道德牺牲品<br />
教训提供者：很多小人物，暂时想不起来了</li>
<li>第四是恃才傲物，口出狂言，前程尽毁<br />
教训提供者：唐伯虎</li>
<li>第五是丧失良知，投机利己，不得善终<br />
教训提供者：解缙</li>
<li>第六是不懂隐忍，祸从口出<br />
教训提供者：朱瞻基他二叔</li>
</ul>
<p>上述教训，虽然有些描述不太准确，但是大多都能引人深思。但是，史书的意义，往往多于告诫，更是提供了很多精神楷模，甚至是命运多桀的王者，也帮人看清时间长河里不变的珍贵之物，如良知、勇气、理想。除去那些当时为了追逐权力和王座而惊天动地的帝王将相之外，像<strong>郑和，杨士奇，于谦，王阳明，徐阶，戚继光，张居正</strong>，这些人物，他们的人生，我认为值得我一读再读，是精神楷模。</p>
<p>这些精神楷模，提供的是人生道路中对珍贵之物的一种坚持，而这种坚持，日常生活中看不见，历史影像里看不见，都被他们用生命写在史书里了。正因如此，需多读，多反思。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go语言特性]]></title>
    <link href="chaoranlaoge.top/16321151686617.html"/>
    <updated>2021-09-20T13:19:28+08:00</updated>
    <id>chaoranlaoge.top/16321151686617.html</id>
    <content type="html"><![CDATA[
<h2><a id="%E5%BC%80%E5%8F%91%E5%BF%AB" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>开发快</h2>
<h3><a id="%E7%BC%96%E8%AF%91%E5%BF%AB" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>编译快</h3>
<p>只会关注那些被直接被引用的库，而不是像 Java、C 和 C++那样,要遍历依赖链中所有依赖的库</p>
<p>在现代硬件上,编译整个 Go 语言的源码树只需要 20 秒。</p>
<h3><a id="%E7%BC%96%E8%AF%91%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%9F%A5" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>编译类型检查</h3>
<p>因为没有从编译代码到执行代码的中间过程,用动态语言编写应用程序可以快速看到输出。<br />
代价是, 动态语言不提供静态语言提供的类型安全特性, 不得不经常用大量的测试套件来避免在运行的时候出现类型错误这类 bug。</p>
<p>在 Go 语言里,完全不用为这件事情操心,因为编译器就能帮用户捕获这种类型错误。</p>
<h2><a id="%E5%8E%9F%E7%94%9F%E6%94%AF%E6%8C%81%E5%B9%B6%E5%8F%91" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>原生支持并发</h2>
<p>go语言内置并发支持，称为goroutine，但仅仅原生支持并不够。</p>
<p>并发的最难的部分就是要确保其他并发运行的进程、线程或 goroutine不会意外修改用户的数据。当不同的线程在没有同步保护的情况下修改同一个数据时，总会发生灾难。在其他语言中，如果使用全局变量或者共享内存，必须使用复杂的锁规则来防止对同一个变量的不同步修改。</p>
<p>为了解决这个问题，通道（channel）提供了一种新模式,从而保证并发修改时的数据安全。通道这一模式保证同一时刻只会有一个 goroutine修改数据。</p>
<h3><a id="goroutine" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>goroutine</h3>
<p>goroutine，执行单位是函数，相当于其他语言中线程的作用，但是他占用的内存比线程小，需要编写的代码比线程少，而且go语言会有内置的一组逻辑处理器，来做goroutine的调度，调度器会绑定在线程上，一个机器可以启动成千上万个goroutine。</p>
<p>goroutine，只需要关键字go，就能触发。</p>
<h3><a id="channel" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>channel</h3>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shell备忘录]]></title>
    <link href="chaoranlaoge.top/16272759911547.html"/>
    <updated>2021-07-26T13:06:31+08:00</updated>
    <id>chaoranlaoge.top/16272759911547.html</id>
    <content type="html"><![CDATA[
<h2><a id="%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86%E7%B1%BB%E5%9E%8B" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>文件处理类型</h2>
<ol>
<li>查看文件夹目录底下的所有文件大小</li>
</ol>
<blockquote>
<p>du -h --max-depth=1</p>
</blockquote>
<ol start="2">
<li>查看文件系统大小列表</li>
</ol>
<blockquote>
<p>df -h</p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SpringBoot个人笔记]]></title>
    <link href="chaoranlaoge.top/16265051871022.html"/>
    <updated>2021-07-17T14:59:47+08:00</updated>
    <id>chaoranlaoge.top/16265051871022.html</id>
    <content type="html"><![CDATA[
<h2><a id="service%E6%B3%A8%E8%A7%A3%E5%8A%A0%E9%94%99%E4%BD%8D%E7%BD%AE" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>@Service注解加错位置</h2>
<p>Spring大框架结构下，为了适应当今移动互联网前后台分离的要求，SpringMVC（Model-View-Controller）框架应运而生。</p>
<p>在理解MVC概念之前，我们需要先理解一个主流互联网语境下的概念：前后端分离。这里的“分离”有两层含义，一是指的是代码逻辑分离，即前端和后端开发人员能只通过简明的API文档进行交流。二是，随着互联网公司人员架构体系的扩大，在岗位分工上出现了特定的前端以及后端的开发人员。对这两个含义来说，前者是技术趋势，后者是商业快速发展带来的结果。换而言之，商业化不明显的开发过程中，一般来说，前后端开发人员是不分家的，一个或多个软件工程师是需要理解并能够实现两端的逻辑的。所以，作为一个以技术为生的工程师，就很有必要明白MVC这个横跨前后端的概念。</p>
<p>MVC即Model、View、Controller即模型、视图、控制器。<br />
<img src="media/16265051871022/16269982939084.jpg" alt="图片来源于《深入浅出SpringBoot2.x》9-1 侵删" /></p>
<blockquote>
<p>请求会首先到达控制器，然后控制器主要作用是分发请求，会根据请求内容去访问Model层。Model层的数据主要从数据库和NoSQL中来，而且对于数据库而言往往还存在事务的机制，为了适应这样的变化，设计者会把模型层再细分为两层，即服务层(Service)和数据访问层(DAO)。当控制器获取到由模型层返回的数据后，就将数据渲染到视图中，这样就能够展现给用户了。 -- 《深入浅出SpringBoot 2.x》</p>
</blockquote>
<p>换句话说，View层是界面，Model层是业务逻辑，Controller层用来调度View层和Model层，来将不同的View和不同的Model组织在一起，顺便替双方传递消息。从抽象Controller层的目的来看，MVC要实现的目标是将软件用户界面和业务逻辑分离以使代码可扩展性、可复用性、可维护性、灵活性加强。</p>
<h2><a id="value%E9%BB%98%E8%AE%A4%E5%80%BC%E5%A1%AB%E9%94%99%E4%BD%8D%E7%BD%AE" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>@Value默认值填错位置</h2>
<p>开发与配置分离</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[送你回家]]></title>
    <link href="chaoranlaoge.top/16201987348677.html"/>
    <updated>2021-05-05T15:12:14+08:00</updated>
    <id>chaoranlaoge.top/16201987348677.html</id>
    <content type="html"><![CDATA[
<p>夜幕天凉</p>
<p>大楼灯光</p>
<p>你漫步阶下</p>
<p>我才知道</p>
<p>看见你会不自觉微笑</p>
<p>与你粘着肩膀</p>
<p>走在路灯底下</p>
<p>你说今天没什么可讲</p>
<p>但也就这样</p>
<p>慢慢闲聊</p>
<p>有说有笑</p>
<p>路灯太暗</p>
<p>手持相机拍不出你脸庞</p>
<p>所以只有我看到</p>
<p>“今天你很好看”</p>
<p>快走过天桥</p>
<p>时间太短</p>
<p>你说我就只能是来送你回家</p>
<p>我说记性有点变差</p>
<p>其实是我害怕</p>
<p>人生太长</p>
<p>以后我会忘了</p>
<p>我们曾一起回家</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go速成（Java）]]></title>
    <link href="chaoranlaoge.top/16140023691726.html"/>
    <updated>2021-02-22T21:59:29+08:00</updated>
    <id>chaoranlaoge.top/16140023691726.html</id>
    <content type="html"><![CDATA[
<p>本文主要是作者看到<a href="https://oi-wiki.org/lang/java/">OI wiki</a>上的Java速成，刚好那时候读完了Go语言之旅<a href="https://tour.go-zh.org/list">tour.go-zh.org</a>，试着写的一个Go语言语法速成指南。</p>
<blockquote>
<p>Go（又称Golang）是Google开发的一种静态强类型、编译型、并发型，并具有垃圾回收功能的编程语言。</p>
</blockquote>
<p>从某种程度上来说，我更愿意以Java来对比Go，但对于一些语法糖，我更愿意转向Python来对比。</p>
<span id="more"></span><!-- more -->
<ul>
<li><a href="#%E5%AE%89%E8%A3%85">安装</a>
<ul>
<li><a href="#%E4%BB%8E%E5%9B%BD%E5%86%85%E7%BD%91%E7%AB%99%E4%B8%8B%E8%BD%BD">从国内网站下载</a></li>
<li><a href="#ide%E6%8E%A8%E8%8D%90">IDE推荐</a></li>
</ul>
</li>
<li><a href="#%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95">基本语法</a>
<ul>
<li><a href="#%E6%B3%A8%E9%87%8A">注释</a></li>
<li><a href="#%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E">变量声明</a></li>
<li><a href="#%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">基本数据类型</a></li>
<li><a href="#%E6%95%B0%E7%BB%84">数组</a></li>
<li><a href="#%E5%88%87%E7%89%87">切片</a></li>
<li><a href="#%E5%AD%97%E7%AC%A6%E4%B8%B2">字符串</a></li>
<li><a href="#%E8%BE%93%E5%87%BA">输出</a></li>
<li><a href="#%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5">控制语句</a>
<ul>
<li><a href="#%E9%80%89%E6%8B%A9">选择</a></li>
<li><a href="#%E5%BE%AA%E7%8E%AF">循环</a></li>
</ul>
</li>
<li><a href="#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9">注意事项</a></li>
</ul>
</li>
</ul>

<h2><a id="%E5%AE%89%E8%A3%85" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>安装</h2>
<p>学习Go，可能是很多CS学生或者技术爱好者拥抱云原生浪潮最开始的第一步，但无奈的是，大多数人在第一个浪来的时候，就被拍死在沙滩上了。这里主要是以下几个原因：</p>
<ol>
<li>由于是谷歌公司开发的语言，Go语言的官方网址是托管在谷歌服务器上的，所以国内访问被墙是毫无疑问。</li>
<li>官方网站无法访问的情况下，不知道去哪里获取语言安装包，其次不知道去哪里获取标准的官方文档。</li>
<li>由于Go语言开发时，谷歌公司选择利用Github进行托管，导致Go语言相关的核心依赖包也顺理成章地都托管在Github上，当使用命令 <code>go get</code> 时基本上都会连接超时而无法下载依赖包，这个相当于是第二个噩耗（国内访问Github也是经常连不上，语言安装完成之后，依赖包无法下载就更无法处理程序编译了）。</li>
<li>如果有科学上网梯子，那以上3个问题就迎刃而解。（不得不吐槽，对于国内CS学生或者技术爱好者，科学上网梯子真的太重要了）最后，工欲善其事，必先利其器。选择哪一款趁手兵器（IDE），就是困扰初学者敲代码前的最后一个问题了。</li>
</ol>
<p>进入这个章节，我们着眼于解决前文提到的第一个问题：Go语言官方网站国内访问不上，如何安装Go语言。</p>
<h3><a id="%E4%BB%8E%E5%9B%BD%E5%86%85%E7%BD%91%E7%AB%99%E4%B8%8B%E8%BD%BD" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>从国内网站下载</h3>
<p>国内支持下载安装包的网址有：</p>
<ol>
<li><a href="https://studygolang.com/dl">Go语言中文网下载页面</a></li>
</ol>
<p>如果有梯子的话，官方下载地址为：<a href="https://golang.org/dl/">GoLang官网下载页面</a></p>
<p>下载完成之后，对于Windows和MacOS双击启动安装，并遵循提示进行安装。<br />
安装完成之后，会将可执行二进制文件的文件夹<code>bin</code>目录加入系统的<code>PATH</code>环境变量。</p>
<h3><a id="ide%E6%8E%A8%E8%8D%90" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>IDE推荐</h3>
<table>
<thead>
<tr>
<th>IDE</th>
<th>环境搭建难度</th>
<th>推荐指数</th>
</tr>
</thead>
<tbody>
<tr>
<td>VSCode</td>
<td>有点难</td>
<td>🌟🌟🌟</td>
</tr>
<tr>
<td>GoLand（收费）</td>
<td>无难度</td>
<td>🌟🌟🌟🌟🌟</td>
</tr>
</tbody>
</table>
<h2><a id="%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>基本语法</h2>
<p>注意Go，类似Java/C/C++ 语言，有一个函数作为程序执行的起始点，所有的程序只有一个主函数，每次执行的时候都会从主类开始，主函数是整个程序的入口，一切从此处开始。</p>
<p>以下给出一段经典的“Hello,World”示例代码：</p>
<pre><code class="language-go">package main

import &quot;fmt&quot;

func main() {
	fmt.Println(&quot;Hello, World&quot;)
}
</code></pre>
<h3><a id="%E6%B3%A8%E9%87%8A" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>注释</h3>
<p>和 C/C++/Java一样，Go 使用 // 和 /* */ 分别注释单行和多行。</p>
<h3><a id="%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>变量声明</h3>
<h3><a id="%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>基本数据类型</h3>
<h3><a id="%E6%95%B0%E7%BB%84" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>数组</h3>
<h3><a id="%E5%88%87%E7%89%87" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>切片</h3>
<p>可变数组，使用上可以类比Python的切片</p>
<h3><a id="%E5%AD%97%E7%AC%A6%E4%B8%B2" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>字符串</h3>
<h3><a id="%E8%BE%93%E5%87%BA" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>输出</h3>
<h3><a id="%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>控制语句</h3>
<h4><a id="%E9%80%89%E6%8B%A9" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>选择</h4>
<h4><a id="%E5%BE%AA%E7%8E%AF" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>循环</h4>
<h3><a id="%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>注意事项</h3>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[记观影《唐人街探案3》的十个优秀细节]]></title>
    <link href="chaoranlaoge.top/16132317373263.html"/>
    <updated>2021-02-13T23:55:37+08:00</updated>
    <id>chaoranlaoge.top/16132317373263.html</id>
    <content type="html"><![CDATA[
<ol>
<li>同声传译的耳机</li>
<li>串联秦风的儿时回忆作为细节补充</li>
<li>日本cosplay文化和游行</li>
<li>日本庙会游街文化和盂兰盆节</li>
<li>日本相扑和剑道</li>
<li>3个穷人2个面包公平分配问题</li>
<li>Q的揭示</li>
<li>各种街景设计，新干线展示，特殊地点，比如秋叶原，特色弹珠厅</li>
<li>日本黑道文化+纹身文化+泡汤文化</li>
<li>Q的五个测试设计和接头人</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[想幸福的人]]></title>
    <link href="chaoranlaoge.top/16128386822319.html"/>
    <updated>2021-02-09T10:44:42+08:00</updated>
    <id>chaoranlaoge.top/16128386822319.html</id>
    <content type="html"><![CDATA[
<p>今天听到的一首歌，杨丞琳的新歌，《想幸福的人》，写了我今年所有想说，而没说的话。</p>
<p>2021年了，临近今年春节之际，祝大家新年快乐。</p>
<p>给那些和我一样的温暖的狗子们，来年能遇到会生根的缘分！！！</p>
<p>正文内容是歌词，词写的很好，我手敲了一遍，以表感激。</p>
<span id="more"></span><!-- more -->
<hr />
<p>《想幸福的人》</p>
<pre><code class="language-plain_text">-- 杨丞琳（歌手）
-- 姚若龙（词手）
</code></pre>
<p>心里的乌云</p>
<p>眼角的秘密</p>
<p>来不及燃烧的感情</p>
<p>被流言给吹熄</p>
<p>转身回到孤寂</p>
<p>生活的丛林</p>
<p>坚强的游戏</p>
<p>在白天掏空了勇气</p>
<p>在黑夜剩不平</p>
<p>不懂错在哪里</p>
<p>我不过是一个很想幸福的人</p>
<p>为什么遇不到会生根的缘分</p>
<p>学着戒掉悲观 负我的都不恨</p>
<p>让心灵完整 美丽动人</p>
<p>还是一个人</p>
<p>生活的丛林</p>
<p>坚强的游戏</p>
<p>在白天掏空了勇气</p>
<p>在黑夜剩不平</p>
<p>不懂错在哪里</p>
<p>寂寞地当一个很想幸福的人</p>
<p>等待着一颗心接受我的坦诚</p>
<p>懂得爱甜蜜中有苦涩的成分</p>
<p>会和我争论 爱却不磨损</p>
<p>没有不信任</p>
<p>我相信 当一个很想幸福的人</p>
<p>也必须是能够让人幸福的人</p>
<p>我不怕去付出 也肯承担责任</p>
<p>温暖的诚恳 温柔的迷人</p>
<p>谁是那个人 能让我沸腾</p>
<p>想幸福的人</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[走投无路，我只好卖身]]></title>
    <link href="chaoranlaoge.top/16127114053987.html"/>
    <updated>2021-02-07T23:23:25+08:00</updated>
    <id>chaoranlaoge.top/16127114053987.html</id>
    <content type="html"><![CDATA[
<p><img src="media/16127114053987/16127117730903.jpg" alt="" /></p>
<p>关于奇葩说第七季第14期的辩题：</p>
<p>“奇葩星球新科技，人们可以自由买卖生命时间，你支持吗？”</p>
<p>本文是，我看完之后正反方辩论之后，对于这个科技如何实现的一种想象。</p>
<span id="more"></span><!-- more -->
<h2><a id="%E5%AE%9E%E7%8E%B0%E5%BD%A2%E5%BC%8F" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>实现形式</h2>
<p>我觉得，买卖生命这个交易，如果要服务好交易双方，至少需要满足以下几个条件：</p>
<ul>
<li>买卖双方寿命可预测，否则没人敢冒险卖</li>
<li>买方接收到寿命时，如果濒临死亡，也要能起死回生，不然买了也没用</li>
<li>寿命叠加后，人体状态要能恢复，如果人衰老到无法动弹，要能够返老还童</li>
<li>7日内可撤回交易，也就是假如买方作为受益方已经受益，但卖方提出交易撤回，需要能使买方回到过去的状态，比如返老还童或者起死回生了都要回到交易前状态，意味着人要能回到过去</li>
<li>交易完成之后，卖方自愿承担后果，买方可自由再交易</li>
</ul>
<p>思考完以上几个条件后，我在思考，近一两百年或许人类可能永远无法攻克，如何使一个人回到过去，也无法预测一个人的寿命，也可能无法攻克如何使一个人返老还童，也可能无法攻克使一个濒危死亡的人起死回生，我们短期内根本无法尝到这个科技的甜头。但是，未来的近一两百年，量子数据库出现是有可能的，每一个人类的记忆以及知识图谱，实现数字化的上传和下载都也是可能的，从而可以实现人类大脑的重置，可以实现“借体还魂”，实现另一种形式的重生和生命时间的交易。</p>
<p>因此，买卖生命这个交易，或许可以转换成，出售身体自主权为交易内容。也就是如题所说的”卖身“，这样可以无需要求寿命可预期，卖方只要出售身体自主权，即便中途死亡，也是买方承担风险。具体的交易形式如下：</p>
<ol>
<li>买方生前，从自己的遗产管理协议中签订，订阅哪一个意识体托管服务商，多少次”借体还魂“的服务，买方要提出自己的活动要求供卖方考量</li>
<li>服务商会在买方死亡24小时内，数字化的上传买方的所有记忆以及知识图谱</li>
<li>卖方根据每一个服务商的每小时的采购价格，出售自己至少7日之后的哪一个时间段内的身体自主权，签订协议，服务商会告知卖方需要承担买方掌握其身体自主权后可能产生的生命风险</li>
<li>卖方提前收到交易款，7日内可退款，撤销交易</li>
<li>买方可以指定卖方的性别，年龄，身体状况作为交易要求，从而实现返老还童的要求</li>
<li>卖方可以要求买方的性别，活动的形式/范围。</li>
<li>假如卖方在交易过程中身体遭受意外，买方需要承担意外死亡/伤害的风险，而且需要承担所有医疗费用，以及保险费用。</li>
<li>交换身体自主权的当天，卖方大脑的记忆和知识图谱会全部上传暂存服务器，同时买方的知识图谱和部分记忆片段会下载到卖方大脑，服务商需要随时监视买方活动，避免所有伤害卖方身体的可能，并具备随时暂停交易，保证卖方的权利</li>
<li>法律应当规定伦理道德底线，交易双方必须是出生时间至少相差50年的人，而且素未谋面。交易过程中，买方只能够获取部分与身份无关的记忆片段，但拥有生前的知识，如果交易过程中买方回忆起自身身份，交易停止。</li>
</ol>
<p>那么如果交易真的要成立，服务商是中间不可或缺的环境，并且服务商所依赖的”量子数据库“，更是其核心技术，而这个核心技术如何实现呢？</p>
<h2><a id="%E8%84%91%E6%B4%9E%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>脑洞核心技术</h2>
<p>（下面就是一派胡言）</p>
<p>纵观现今，2021年，所有数据存储都依赖存储介质，未来肯定也是，存储介质实现加量不加价，甚至白菜价都是未来的趋势。真正的问题在于，现有的数据库系统都需要人的设计数据形式，不管是图/表/还是图谱，都需要人为先设计存储形式再存储数据，才能以我们需要的形式进行读取。而这些人为设计的元数据信息，都是有限集合。如何设计一个无限的元数据集合，做到自动直接地进行数据存储，并实现按需读取，才是未来的关键。</p>
<p>我们知道，任何生命在当下的三维世界里的所有行动都会产生不确定性，而不确定性本身没办法记录，但不确定性本身又何尝不能作为存储信息的单元呢？从古至今，每一个不确定性只要都能被打上了标签，那么这个标签形成的链，将能够存储极大的信息量，而这个链，便能成为一种“量子数据库”。不确定性永远都能被自动地产生，所以这个数据库存储量是无穷无尽的。数据库的形成里，我们不记录不确定性，我们只捕获这个不确定性，并关联确定性事件。举个最简单的例子，薛定谔的猫在盒子里，我们只把猫的生死，这个叠加态关联上一个确定性的标签A。数据库的写入时，当我们往标签A写入一条数据时，这条数据会绑定到叠加态坍缩后的可观测态，于此同时我们记录可观测态和数据的关联，实现直接地数据存储。数据读取时，我们从存储介质检索标签A，以及观测态来获取数据。根据这个简单原理，理论上标签的无穷尽的，而每个标签能否再次写入数据是能够被判定的，因为观测态如果重复了就拒绝，如果不重复就可以写入，而且每个数据都可以被检索，从而可以实现这个量子数据库。不仅如此，这个理论上无穷尽的数据库，是足以存下现在所有存活人类的记忆以及知识图谱的，但一切都建立在付费的基础上，毕竟存储介质都是有价值的物理实体。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Centos7 Hadoop集群安装]]></title>
    <link href="chaoranlaoge.top/16127105620051.html"/>
    <updated>2021-02-07T23:09:22+08:00</updated>
    <id>chaoranlaoge.top/16127105620051.html</id>
    <content type="html"><![CDATA[
<p>阿里云上申请三台每小时0.5块钱的机器，一小时总花费1.5块钱。<br />
根据以下教程，在20分钟之内，搞定整个Hadoop单Master集群部署。</p>
<span id="more"></span><!-- more -->
<p>先在阿里云上申请3台最便宜的服务器，在同一个区就行，然后就直接开搞</p>
<h2><a id="%E8%AE%BE%E7%BD%AEhosts%E5%92%8Cssh" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>设置hosts和ssh</h2>
<pre><code class="language-shell">vim /etc/hosts

# 添加内网IP以及相应的hostname，比如：
172.31.140.249 node03
172.31.140.244 node01
172.31.140.246 node02
# :wq保存退出

# 如果没有设置对hostname, 如下设置命令
hostnamectl set-hostname node01
</code></pre>
<ul>
<li>安装依赖</li>
</ul>
<pre><code class="language-shell">yum install ssh, pdsh
</code></pre>
<ul>
<li>三台机器设置免密</li>
</ul>
<pre><code class="language-shell"># 举个例子，将node02到node01的登陆免密
[root@node02 ~]: ssh-keygen # 三次回车，不设置额外明文密码，生成自己机器的pub公共密钥文件，id_rsa.pub
[root@node02 ~]: scp ~/.ssh/id_rsa.pub node01:~/.ssh/node02.pub  # 配置自己登陆自己的公钥
# 登陆node01
[root@node01 ~]: cat ~/.ssh/node02.pub &gt;&gt; ~/.ssh/authorized_keys # 追加免认证密钥
# 登陆node02
[root@node02 ~]: ssh node01 #此时就免认证

# 然后这里有没有什么更快捷的方法能相互认证免密？
</code></pre>
<h2><a id="%E5%AE%89%E8%A3%85jdk" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>安装JDK</h2>
<p>从Oracle官网（需要登陆账号，没有的需要先注册再下载）下载安装压缩包，上传到一台阿里云服务器，其他的用内网传输</p>
<ul>
<li>创建安装目录</li>
</ul>
<pre><code class="language-shell">mkdir /usr/local/java/
</code></pre>
<ul>
<li>解压至安装目录</li>
</ul>
<pre><code class="language-shell">tar -zxvf jdk-8u281-linux-x64.tar.gz -C /usr/local/java/
</code></pre>
<ul>
<li>设置环境变量</li>
</ul>
<pre><code class="language-shell"># 修改配置文件
vim /etc/profile
# 输入 G, o, 进入insert模式，然后粘贴以下内容
export JAVA_HOME=/usr/local/java/jdk1.8.0_281
export JRE_HOME=${JAVA_HOME}/jre
export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib
export PATH=${JAVA_HOME}/bin:$PATH
# esc 输入:wq 退出vim
source /etc/profile # 使环境变量生效
ln -s /usr/local/java/jdk1.8.0_171/bin/java /usr/bin/java # 添加软链接
java -version # 验证

</code></pre>
<h2><a id="%E5%AE%89%E8%A3%85hadoop" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>安装Hadoop</h2>
<ul>
<li>下载Hadoop</li>
</ul>
<pre><code class="language-shell">wget https://mirrors.tuna.tsinghua.edu.cn/apache/hadoop/common/hadoop-3.2.2/hadoop-3.2.2.tar.gz
</code></pre>
<ul>
<li>解压到文件夹并重命名</li>
</ul>
<pre><code class="language-shell">tar -xzvf hadoop-3.2.2.tar.gz -C /usr/local
mv /usr/local/hadoop-3.2.2 /usr/local/hadoop
</code></pre>
<h2><a id="%E4%BF%AE%E6%94%B9hadoop%E9%85%8D%E7%BD%AE" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>修改hadoop配置</h2>
<ul>
<li>core-site.xml</li>
</ul>
<pre><code class="language-xml">&lt;configuration&gt;
    &lt;property&gt;
        &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;
        &lt;value&gt;file:/usr/local/hadoop/tmp&lt;/value&gt;
        &lt;description&gt;Abase for other temporary directories.&lt;/description&gt;
    &lt;/property&gt;
    &lt;property&gt;
        &lt;name&gt;fs.defaultFS&lt;/name&gt;
        &lt;value&gt;hdfs://node01:9000&lt;/value&gt;
    &lt;/property&gt;
&lt;/configuration&gt;
</code></pre>
<blockquote>
<p><strong>特别注意：如没有配置<code>hadoop.tmp.dir</code>参数，此时系统默认的临时目录为：<code>/tmp/hadoo-hadoop</code>。而这个目录在每次重启后都会被删除，必须重新执行format才行，否则会出错。</strong></p>
<p>摘自博客 - 纯洁的微笑 - hadoop分布式集群搭建</p>
</blockquote>
<ul>
<li>hdfs-site.xml</li>
</ul>
<pre><code class="language-xml">&lt;configuration&gt;
    &lt;property&gt;
        &lt;name&gt;dfs.replication&lt;/name&gt;
        &lt;value&gt;3&lt;/value&gt;
    &lt;/property&gt;
    &lt;property&gt;
        &lt;name&gt;dfs.name.dir&lt;/name&gt;
        &lt;value&gt;/usr/local/hadoop/hdfs/name&lt;/value&gt;
    &lt;/property&gt;
    &lt;property&gt;
        &lt;name&gt;dfs.data.dir&lt;/name&gt;
        &lt;value&gt;/usr/local/hadoop/hdfs/data&lt;/value&gt;
    &lt;/property&gt;
&lt;/configuration&gt;
</code></pre>
<ul>
<li>mapred-site.xml</li>
</ul>
<pre><code class="language-xml">&lt;configuration&gt;
  &lt;property&gt;
      &lt;name&gt;mapreduce.framework.name&lt;/name&gt;
      &lt;value&gt;yarn&lt;/value&gt;
  &lt;/property&gt;
   &lt;property&gt;
      &lt;name&gt;mapred.job.tracker&lt;/name&gt;
      &lt;value&gt;http://hadoop-master:9001&lt;/value&gt;
  &lt;/property&gt;
&lt;/configuration&gt;
</code></pre>
<ul>
<li>yarn-site.xml</li>
</ul>
<pre><code class="language-xml">&lt;configuration&gt;
&lt;!-- Site specific YARN configuration properties --&gt;
    &lt;property&gt;
        &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;
        &lt;value&gt;mapreduce_shuffle&lt;/value&gt;
    &lt;/property&gt;
    &lt;property&gt;
        &lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;
        &lt;value&gt;hadoop-master&lt;/value&gt;
    &lt;/property&gt;
&lt;/configuration&gt;
</code></pre>
<ul>
<li>修改执行用户</li>
</ul>
<p>在start-dfs.sh和stop-dfs.sh中开头空白处添加：</p>
<pre><code class="language-shell">HDFS_DATANODE_USER=root
HADOOP_SECURE_DN_USER=hdfs
HDFS_NAMENODE_USER=root
HDFS_SECONDARYNAMENODE_USER=root 
</code></pre>
<p>在start-yarn.sh和stop-yarn.sh开头空白处添加：</p>
<pre><code class="language-shell">YARN_RESOURCEMANAGER_USER=root
HADOOP_SECURE_DN_USER=yarn
YARN_NODEMANAGER_USER=root
</code></pre>
<ul>
<li>配置JAVA_HOME到hadoop-env.sh和yarn-env.sh</li>
</ul>
<pre><code class="language-shell"># 输入 G, o, 进入insert模式，然后粘贴以下内容
export JAVA_HOME=/usr/local/java/jdk1.8.0_281
</code></pre>
<ul>
<li>同步hadoop文件夹到其他slave服务器</li>
</ul>
<pre><code class="language-shell">scp -r /usr/local/hadoop node02:/usr/local/
scp -r /usr/local/hadoop node03:/usr/local/
</code></pre>
<ul>
<li>workers文件</li>
</ul>
<pre><code class="language-shell">vi /usr/local/hadoop/etc/hadoop/slaves
## 内容
node02
node03
</code></pre>
<ul>
<li>配置环境变量</li>
</ul>
<pre><code class="language-shell"># 修改配置文件
vim /etc/profile
# 输入 G, o, 进入insert模式，然后粘贴以下内容
export HADOOP_HOME=/usr/local/hadoop
export PATH=$PATH:$HADOOP_HOME/bin 
# esc 输入:wq 退出vim
source /etc/profile # 使环境变量生效
</code></pre>
<h2><a id="%E5%90%AF%E5%8A%A8hadoop" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>启动Hadoop</h2>
<pre><code class="language-shell">cd $HADOOP_HOME
# 首次启动才需要
bin/hadoop namenode -format 

# 启动集群
sbin/start-all.sh

# 关闭集群
sbin/stop-all.sh
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[平平无奇，靠什么弯道超车]]></title>
    <link href="chaoranlaoge.top/16101634062262.html"/>
    <updated>2021-01-09T11:36:46+08:00</updated>
    <id>chaoranlaoge.top/16101634062262.html</id>
    <content type="html"><![CDATA[
<h2><a id="%E8%AF%BB%E3%80%8A%E5%86%AF%E5%94%90%E6%88%90%E4%BA%8B%E5%BF%83%E6%B3%95%E3%80%8B%E7%9A%84%E6%80%9D%E8%80%83%EF%BC%88%E4%BA%8C%EF%BC%89" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>读《冯唐成事心法》的思考（二）</h2>
<blockquote>
<p>人生惟有常是第一美德。<br />
凡事皆用困知勉行功夫，不可求名太骤，求效太捷也。<br />
困时切莫间断，熬过此关，便可少进。<br />
不特习字，凡事皆有极困极难之时，打得通的，便是好汉。<br />
临事静对猛虎，事了闲看落花。<br />
敬字，恒字二端，是彻始彻终工夫。鄙人生平欠此二字，至今老而无成，深自悔憾。</p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[年轻人，你要倔强]]></title>
    <link href="chaoranlaoge.top/16101619474323.html"/>
    <updated>2021-01-09T11:12:27+08:00</updated>
    <id>chaoranlaoge.top/16101619474323.html</id>
    <content type="html"><![CDATA[
<h2><a id="%E8%AF%BB%E3%80%8A%E5%86%AF%E5%94%90%E6%88%90%E4%BA%8B%E5%BF%83%E6%B3%95%E3%80%8B%E7%9A%84%E6%80%9D%E8%80%83%EF%BC%88%E4%B8%80%EF%BC%89" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>读《冯唐成事心法》的思考（一）</h2>
<blockquote>
<p>强自禁制，降伏此心。释氏谓之降龙伏虎，龙即相火也，虎即肝火也。多少英雄豪杰打此二关不破，亦不仅余与弟为然，要在稍稍遏抑，不令过炽。古圣所谓窒欲，即降龙也；所谓惩忿，即伏虎也。释儒之道不同，而其节制血气未尝不同。总不使吾之嗜欲戕害吾之躯命而已。至于倔强二字，却不可少。功业文章，皆须有此二字贯注其中。孟子所谓至刚，孔子所谓贞固，皆从倔强二字做出。吾兄弟好处正在倔强。若能去忿欲以养体，存倔强以励志，则日进无疆矣。</p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lecture 1]]></title>
    <link href="chaoranlaoge.top/16053228002405.html"/>
    <updated>2020-11-14T11:00:00+08:00</updated>
    <id>chaoranlaoge.top/16053228002405.html</id>
    <content type="html"><![CDATA[

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go 安装技巧 + IDE + 资源推荐]]></title>
    <link href="chaoranlaoge.top/16051903090609.html"/>
    <updated>2020-11-12T22:11:49+08:00</updated>
    <id>chaoranlaoge.top/16051903090609.html</id>
    <content type="html"><![CDATA[
<ul>
<li>本文主要为初学者提供了Windows和Mac的防止被墙的安装技巧</li>
<li>最后给初学者推荐了优质电子书/网站/学习资源及课程</li>
<li>阅读时间5分钟</li>
</ul>
<span id="more"></span><!-- more -->
<p>学习Go，可能是很多CS学生或者技术爱好者拥抱云原生浪潮最开始的第一步，但无奈的是，大多数人在第一个浪来的时候，就被拍死在沙滩上了。这里主要是以下几个原因：</p>
<ol>
<li>由于是谷歌公司开发的语言，Go语言的官方网址是托管在谷歌服务器上的，所以国内访问被墙是毫无疑问。</li>
<li>官方网站无法访问的情况下，不知道去哪里获取语言安装包，其次不知道去哪里获取标准的官方文档。</li>
<li>由于Go语言开发时，谷歌公司选择利用Github进行托管，导致Go语言相关的核心依赖包也顺理成章地都托管在Github上，当使用命令 <code>go get</code> 时基本上都会连接超时而无法下载依赖包，这个相当于是第二个噩耗（国内访问Github也是经常连不上，语言安装完成之后，依赖包无法下载就更无法处理程序编译了）。</li>
<li>如果有科学上网梯子，那以上3个问题就迎刃而解。（不得不吐槽，对于国内CS学生或者技术爱好者，科学上网梯子真的太重要了）最后，工欲善其事，必先利其器。选择哪一款“低价/免费”的趁手兵器（IDE），就是困扰初学者敲代码前的最后一个问题了。</li>
</ol>
<p>很多人，看不上前面4个问题，放弃入门Go出门左拐去拥抱Python了，也有很多人，看了这个教程，从现在开始的5分钟之后就开始运行完了HelloWorld。</p>
<h2><a id="go-windows%E5%92%8Cmac%E5%AE%89%E8%A3%85%E5%B0%8F%E6%8A%80%E5%B7%A7" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>Go Windows和Mac安装小技巧</h2>
<p>进入这个章节，我们着眼于解决前文提到的第一个问题：Go语言官方网站国内访问不上，如何安装Go语言。</p>
<h3><a id="%E4%BB%8E%E5%9B%BD%E5%86%85%E7%BD%91%E7%AB%99%E4%B8%8B%E8%BD%BD" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>从国内网站下载</h3>
<p>国内支持下载安装包的网址有：</p>
<ol>
<li><a href="https://studygolang.com/dl">Go语言中文网下载页面</a></li>
</ol>
<p>如果有梯子的话，官方下载地址为：<a href="https://golang.org/dl/">GoLang官网下载页面</a></p>
<p>下载完成之后，对于Windows和MacOS双击启动安装，并遵循提示进行安装。<br />
安装完成之后，会将可执行二进制文件的文件夹<code>bin</code>目录加入系统的<code>PATH</code>环境变量。</p>
<h3><a id="%E4%BF%AE%E6%94%B9%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E4%BE%9D%E8%B5%96%E5%8C%85%E4%B8%8B%E8%BD%BD" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>修改国内镜像加速依赖包下载</h3>
<p>国内镜像加速的方式，是通过开启国内代理的方式实现的。具体的方式可以参考(Go社区Wiki)[https://learnku.com/go/wikis/38122]:</p>
<pre><code class="language-shell"># 对于类Unix系统
# 启用 Go Modules 功能
go env -w GO111MODULE=on

# 配置 GOPROXY 环境变量，以下三选一

# 1. 七牛 CDN
go env -w  GOPROXY=https://goproxy.cn,direct

# 2. 阿里云
go env -w GOPROXY=https://mirrors.aliyun.com/goproxy/,direct

# 3. 官方
go env -w  GOPROXY=https://goproxy.io,direct
</code></pre>
<p>对于Windows，该网站给出的脚本有点问题，我在Win10上无法使用，具体被我修改为：</p>
<pre><code class="language-powershell">#对于Windows
# 启用 Go Modules 功能
SETX GO111MODULE=&quot;on&quot;

# 配置 GOPROXY 环境变量，以下三选一

# 1. 七牛 CDN
go env -w GOPROXY=&quot;https://goproxy.cn,direct&quot;

# 2. 阿里云
go env -w GOPROXY=&quot;https://mirrors.aliyun.com/goproxy/,direct&quot;

# 3. 官方
go env -w GOPROXY=&quot;https://goproxy.io,direct&quot;
</code></pre>
<p>需要注意的是，<code>GO111MODULE</code>变量初始值为<code>auto</code>，事实上，设置<code>auto</code>是官方降低语言学习门槛有意为之。</p>
<p>如果设置了环境变量，<code>go env -w</code>设置<code>GO111MODULE</code>变量初始值为<code>auto</code>的时候提示无法写入，一般是大家在ide中操作，大家需要先关闭ide，然后删除环境变量后再执行<code>go env</code>命令进行修改.</p>
<p>我经过折腾之后，也不建议初学者一开始就设置代理（有时候初学者分不清楚到底是Go 语言相关的环境变量是否就是系统环境变量，而且会强制要求写<code>gomod</code>文件），建议一开始还是挂科学上网梯子。</p>
<p>至于为什么会是这样的？如果大家点赞（在看超过50），我会再出一篇《go module 包管理器的上位之路》，由这篇博文来讲述来龙去脉。</p>
<h3><a id="%E7%A6%BB%E7%BA%BF%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96%E5%8C%85" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>离线环境安装依赖包</h3>
<p>离线环境安装依赖包，需要提前先下载好依赖，这本身比较麻烦，建议直接安装一体化的IDE工具，比如说GoLand。如果不想使用GoLand，想要使用VSCode，那么参考如下安装教程：</p>
<pre><code class="language-shell">
</code></pre>
<h2><a id="go-vscode%E7%BC%96%E7%A8%8B%E7%8E%AF%E5%A2%83%E6%9E%84%E5%BB%BA" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>Go VSCode 编程环境构建</h2>
<h3><a id="%E4%B8%BA%E4%BB%80%E4%B9%88%E6%8E%A8%E8%8D%90vscode%E4%BD%9C%E4%B8%BAgo%E7%9A%84ide" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>为什么推荐VSCode作为Go的IDE</h3>
<p>vscode要使用梯子，配置首选项添加代理http：//127.0.0.1:1080（ssr）<br />
go install （win是ctrl+shift+p，mac是cmt+opt+p）</p>
<h3><a id="%E5%AE%89%E8%A3%85%E7%9A%84%E5%8C%85%E5%92%8C%E4%BD%9C%E7%94%A8" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>安装的包和作用</h3>
<h2><a id="go%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90%E6%8E%A8%E8%8D%90" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>Go 学习资源推荐</h2>
<p>总的来说，推荐学习顺序如下：</p>
<ol>
<li>Go tour （推荐指数 🌟🌟🌟🌟🌟）<br />
推荐理由：</li>
<li>Go</li>
</ol>
<h3><a id="%E7%94%B5%E5%AD%90%E4%B9%A6%E5%88%86%E4%BA%AB" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>电子书分享</h3>
<h3><a id="%E4%BC%98%E8%B4%A8%E7%BD%91%E7%AB%99%E5%88%86%E4%BA%AB" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>优质网站分享</h3>
<h3><a id="%E4%BC%98%E8%B4%A8%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>优质资源分享</h3>
<h3><a id="%E4%BC%98%E8%B4%A8%E8%AF%BE%E7%A8%8B%E5%88%86%E4%BA%AB" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>优质课程分享</h3>

]]></content>
  </entry>
  
</feed>
